9657efb623f57e50e82cdce595b2885e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("react-native");

var _react = _interopRequireDefault(require("react"));

var _CommonFunctions = require("../app/utils/CommonFunctions");

var _mainReducer = _interopRequireDefault(require("../app/redux/reducers/mainReducer"));

var _mainType = require("../app/redux/types/mainType");

describe("CommonFunctions test", function () {
  it("getRandomList function -> should be 12 integer random list", function () {
    var results = (0, _CommonFunctions.getRandomList)(1, 100, 6, 2);
    console.log(results);
  });
  it("setClickedCount and getClickedCount function test -> should be set value ", function () {
    (0, _CommonFunctions.setClickedCount)(1);
    expect((0, _CommonFunctions.getClickedCount)()).toBe(1);
  });
  it("setCompareInfo and getCompareItemInfo function test", function () {
    (0, _CommonFunctions.setCompareItemInfo)({
      row: 1,
      col: 2,
      number: 3
    });
    expect((0, _CommonFunctions.getCompareItemInfo)()).toEqual({
      row: 1,
      col: 2,
      number: 3
    });
  });
  it("addCompareItem and deleteCompareItem function test", function () {
    (0, _CommonFunctions.addCompareItem)({
      row: 1,
      col: 2,
      number: 3,
      clickedCount: 3
    });
    expect((0, _CommonFunctions.deleteCompareItem)(1));
  });
  it("checkContains function test -> should be false", function () {
    expect((0, _CommonFunctions.checkContains)({
      row: 2,
      col: 3
    })).toBe(false);
  });
});
var initState = {
  count: 0,
  loading: false,
  correctCardNumbers: [],
  isEnded: false,
  cardItems: [[{
    number: 1,
    showFace: false
  }, {
    number: 2,
    showFace: false
  }, {
    number: 3,
    showFace: false
  }], [{
    number: 4,
    showFace: false
  }, {
    number: 5,
    showFace: false
  }, {
    number: 6,
    showFace: false
  }], [{
    number: 7,
    showFace: false
  }, {
    number: 8,
    showFace: false
  }, {
    number: 9,
    showFace: false
  }], [{
    number: 10,
    showFace: false
  }, {
    number: 11,
    showFace: false
  }, {
    number: 12,
    showFace: false
  }]]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC10ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJyZXN1bHRzIiwiY29uc29sZSIsImxvZyIsImV4cGVjdCIsInRvQmUiLCJyb3ciLCJjb2wiLCJudW1iZXIiLCJ0b0VxdWFsIiwiY2xpY2tlZENvdW50IiwiaW5pdFN0YXRlIiwiY291bnQiLCJsb2FkaW5nIiwiY29ycmVjdENhcmROdW1iZXJzIiwiaXNFbmRlZCIsImNhcmRJdGVtcyIsInNob3dGYWNlIl0sIm1hcHBpbmdzIjoiOztBQUlDOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUVBQSxRQUFRLENBQUMsc0JBQUQsRUFBeUIsWUFBTTtBQUNyQ0MsRUFBQUEsRUFBRSxDQUFDLDREQUFELEVBQStELFlBQU07QUFDckUsUUFBSUMsT0FBTyxHQUFHLG9DQUFjLENBQWQsRUFBaUIsR0FBakIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsQ0FBZDtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsT0FBWjtBQUNELEdBSEMsQ0FBRjtBQUtBRCxFQUFBQSxFQUFFLENBQUMsMkVBQUQsRUFBOEUsWUFBTTtBQUNwRiwwQ0FBZ0IsQ0FBaEI7QUFDQUksSUFBQUEsTUFBTSxDQUFDLHVDQUFELENBQU4sQ0FBMEJDLElBQTFCLENBQStCLENBQS9CO0FBQ0QsR0FIQyxDQUFGO0FBS0FMLEVBQUFBLEVBQUUsQ0FBQyxxREFBRCxFQUF3RCxZQUFNO0FBQzlELDZDQUFtQjtBQUFFTSxNQUFBQSxHQUFHLEVBQUUsQ0FBUDtBQUFVQyxNQUFBQSxHQUFHLEVBQUUsQ0FBZjtBQUFrQkMsTUFBQUEsTUFBTSxFQUFFO0FBQTFCLEtBQW5CO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQywwQ0FBRCxDQUFOLENBQTZCSyxPQUE3QixDQUFxQztBQUFFSCxNQUFBQSxHQUFHLEVBQUUsQ0FBUDtBQUFVQyxNQUFBQSxHQUFHLEVBQUUsQ0FBZjtBQUFrQkMsTUFBQUEsTUFBTSxFQUFFO0FBQTFCLEtBQXJDO0FBQ0QsR0FIQyxDQUFGO0FBS0FSLEVBQUFBLEVBQUUsQ0FBQyxvREFBRCxFQUF1RCxZQUFNO0FBQzdELHlDQUFlO0FBQUVNLE1BQUFBLEdBQUcsRUFBRSxDQUFQO0FBQVVDLE1BQUFBLEdBQUcsRUFBRSxDQUFmO0FBQWtCQyxNQUFBQSxNQUFNLEVBQUUsQ0FBMUI7QUFBNkJFLE1BQUFBLFlBQVksRUFBRTtBQUEzQyxLQUFmO0FBQ0FOLElBQUFBLE1BQU0sQ0FBQyx3Q0FBa0IsQ0FBbEIsQ0FBRCxDQUFOO0FBQ0QsR0FIQyxDQUFGO0FBS0FKLEVBQUFBLEVBQUUsQ0FBQyxnREFBRCxFQUFtRCxZQUFNO0FBQ3pESSxJQUFBQSxNQUFNLENBQUMsb0NBQWM7QUFBRUUsTUFBQUEsR0FBRyxFQUFFLENBQVA7QUFBVUMsTUFBQUEsR0FBRyxFQUFFO0FBQWYsS0FBZCxDQUFELENBQU4sQ0FBMENGLElBQTFDLENBQStDLEtBQS9DO0FBQ0QsR0FGQyxDQUFGO0FBR0QsQ0F4Qk8sQ0FBUjtBQTBCQSxJQUFNTSxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLEtBQUssRUFBRSxDQURTO0FBRWhCQyxFQUFBQSxPQUFPLEVBQUUsS0FGTztBQUdoQkMsRUFBQUEsa0JBQWtCLEVBQUUsRUFISjtBQUloQkMsRUFBQUEsT0FBTyxFQUFFLEtBSk87QUFLaEJDLEVBQUFBLFNBQVMsRUFBRSxDQUNULENBQ0U7QUFDRVIsSUFBQUEsTUFBTSxFQUFFLENBRFY7QUFFRVMsSUFBQUEsUUFBUSxFQUFFO0FBRlosR0FERixFQUtFO0FBQ0VULElBQUFBLE1BQU0sRUFBRSxDQURWO0FBRUVTLElBQUFBLFFBQVEsRUFBRTtBQUZaLEdBTEYsRUFTRTtBQUNFVCxJQUFBQSxNQUFNLEVBQUUsQ0FEVjtBQUVFUyxJQUFBQSxRQUFRLEVBQUU7QUFGWixHQVRGLENBRFMsRUFlVCxDQUNFO0FBQ0VULElBQUFBLE1BQU0sRUFBRSxDQURWO0FBRUVTLElBQUFBLFFBQVEsRUFBRTtBQUZaLEdBREYsRUFLRTtBQUNFVCxJQUFBQSxNQUFNLEVBQUUsQ0FEVjtBQUVFUyxJQUFBQSxRQUFRLEVBQUU7QUFGWixHQUxGLEVBU0U7QUFDRVQsSUFBQUEsTUFBTSxFQUFFLENBRFY7QUFFRVMsSUFBQUEsUUFBUSxFQUFFO0FBRlosR0FURixDQWZTLEVBOEJULENBQ0U7QUFDRVQsSUFBQUEsTUFBTSxFQUFFLENBRFY7QUFFRVMsSUFBQUEsUUFBUSxFQUFFO0FBRlosR0FERixFQUtFO0FBQ0VULElBQUFBLE1BQU0sRUFBRSxDQURWO0FBRUVTLElBQUFBLFFBQVEsRUFBRTtBQUZaLEdBTEYsRUFTRTtBQUNFVCxJQUFBQSxNQUFNLEVBQUUsQ0FEVjtBQUVFUyxJQUFBQSxRQUFRLEVBQUU7QUFGWixHQVRGLENBOUJTLEVBNENULENBQ0U7QUFDRVQsSUFBQUEsTUFBTSxFQUFFLEVBRFY7QUFFRVMsSUFBQUEsUUFBUSxFQUFFO0FBRlosR0FERixFQUtFO0FBQ0VULElBQUFBLE1BQU0sRUFBRSxFQURWO0FBRUVTLElBQUFBLFFBQVEsRUFBRTtBQUZaLEdBTEYsRUFTRTtBQUNFVCxJQUFBQSxNQUFNLEVBQUUsRUFEVjtBQUVFUyxJQUFBQSxRQUFRLEVBQUU7QUFGWixHQVRGLENBNUNTO0FBTEssQ0FBbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmb3JtYXRcbiAqL1xuXG4gaW1wb3J0ICdyZWFjdC1uYXRpdmUnO1xuIC8vIE5vdGU6IHRlc3QgcmVuZGVyZXIgbXVzdCBiZSByZXF1aXJlZCBhZnRlciByZWFjdC1uYXRpdmUuXG4gaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbiBcbiBpbXBvcnQgeyBhZGRDb21wYXJlSXRlbSwgY2hlY2tDb250YWlucywgZGVsZXRlQ29tcGFyZUl0ZW0sIGdldENsaWNrZWRDb3VudCwgZ2V0Q29tcGFyZUl0ZW1JbmZvLCBnZXRSYW5kb21MaXN0LCBzZXRDbGlja2VkQ291bnQsIHNldENvbXBhcmVJdGVtSW5mbyB9IGZyb20gJy4uL2FwcC91dGlscy9Db21tb25GdW5jdGlvbnMnO1xuIGltcG9ydCBtYWluUmVkdWNlciBmcm9tICcuLi9hcHAvcmVkdXgvcmVkdWNlcnMvbWFpblJlZHVjZXInO1xuIGltcG9ydCB7IFJFU1RBUlRfR0FNRSB9IGZyb20gJy4uL2FwcC9yZWR1eC90eXBlcy9tYWluVHlwZSc7XG4gXG4gZGVzY3JpYmUoXCJDb21tb25GdW5jdGlvbnMgdGVzdFwiLCAoKSA9PiB7XG4gICBpdChcImdldFJhbmRvbUxpc3QgZnVuY3Rpb24gLT4gc2hvdWxkIGJlIDEyIGludGVnZXIgcmFuZG9tIGxpc3RcIiwgKCkgPT4ge1xuICAgICBsZXQgcmVzdWx0cyA9IGdldFJhbmRvbUxpc3QoMSwgMTAwLCA2LCAyKTtcbiAgICAgY29uc29sZS5sb2cocmVzdWx0cyk7XG4gICB9KTtcbiBcbiAgIGl0KFwic2V0Q2xpY2tlZENvdW50IGFuZCBnZXRDbGlja2VkQ291bnQgZnVuY3Rpb24gdGVzdCAtPiBzaG91bGQgYmUgc2V0IHZhbHVlIFwiLCAoKSA9PiB7XG4gICAgIHNldENsaWNrZWRDb3VudCgxKTtcbiAgICAgZXhwZWN0KGdldENsaWNrZWRDb3VudCgpKS50b0JlKDEpO1xuICAgfSk7XG4gXG4gICBpdChcInNldENvbXBhcmVJbmZvIGFuZCBnZXRDb21wYXJlSXRlbUluZm8gZnVuY3Rpb24gdGVzdFwiLCAoKSA9PiB7XG4gICAgIHNldENvbXBhcmVJdGVtSW5mbyh7IHJvdzogMSwgY29sOiAyLCBudW1iZXI6IDMgfSk7XG4gICAgIGV4cGVjdChnZXRDb21wYXJlSXRlbUluZm8oKSkudG9FcXVhbCh7IHJvdzogMSwgY29sOiAyLCBudW1iZXI6IDMgfSk7XG4gICB9KTtcbiBcbiAgIGl0KFwiYWRkQ29tcGFyZUl0ZW0gYW5kIGRlbGV0ZUNvbXBhcmVJdGVtIGZ1bmN0aW9uIHRlc3RcIiwgKCkgPT4ge1xuICAgICBhZGRDb21wYXJlSXRlbSh7IHJvdzogMSwgY29sOiAyLCBudW1iZXI6IDMsIGNsaWNrZWRDb3VudDogMyB9KTtcbiAgICAgZXhwZWN0KGRlbGV0ZUNvbXBhcmVJdGVtKDEpKTtcbiAgIH0pO1xuIFxuICAgaXQoXCJjaGVja0NvbnRhaW5zIGZ1bmN0aW9uIHRlc3QgLT4gc2hvdWxkIGJlIGZhbHNlXCIsICgpID0+IHtcbiAgICAgZXhwZWN0KGNoZWNrQ29udGFpbnMoeyByb3c6IDIsIGNvbDogMyB9KSkudG9CZShmYWxzZSk7XG4gICB9KTtcbiB9KTtcbiBcbiBjb25zdCBpbml0U3RhdGUgPSB7XG4gICBjb3VudDogMCxcbiAgIGxvYWRpbmc6IGZhbHNlLFxuICAgY29ycmVjdENhcmROdW1iZXJzOiBbXSxcbiAgIGlzRW5kZWQ6IGZhbHNlLFxuICAgY2FyZEl0ZW1zOiBbXG4gICAgIFtcbiAgICAgICB7XG4gICAgICAgICBudW1iZXI6IDEsXG4gICAgICAgICBzaG93RmFjZTogZmFsc2VcbiAgICAgICB9LFxuICAgICAgIHtcbiAgICAgICAgIG51bWJlcjogMixcbiAgICAgICAgIHNob3dGYWNlOiBmYWxzZVxuICAgICAgIH0sXG4gICAgICAge1xuICAgICAgICAgbnVtYmVyOiAzLFxuICAgICAgICAgc2hvd0ZhY2U6IGZhbHNlXG4gICAgICAgfVxuICAgICBdLFxuICAgICBbXG4gICAgICAge1xuICAgICAgICAgbnVtYmVyOiA0LFxuICAgICAgICAgc2hvd0ZhY2U6IGZhbHNlXG4gICAgICAgfSxcbiAgICAgICB7XG4gICAgICAgICBudW1iZXI6IDUsXG4gICAgICAgICBzaG93RmFjZTogZmFsc2VcbiAgICAgICB9LFxuICAgICAgIHtcbiAgICAgICAgIG51bWJlcjogNixcbiAgICAgICAgIHNob3dGYWNlOiBmYWxzZVxuICAgICAgIH1cbiAgICAgXSxcbiBcbiAgICAgW1xuICAgICAgIHtcbiAgICAgICAgIG51bWJlcjogNyxcbiAgICAgICAgIHNob3dGYWNlOiBmYWxzZVxuICAgICAgIH0sXG4gICAgICAge1xuICAgICAgICAgbnVtYmVyOiA4LFxuICAgICAgICAgc2hvd0ZhY2U6IGZhbHNlXG4gICAgICAgfSxcbiAgICAgICB7XG4gICAgICAgICBudW1iZXI6IDksXG4gICAgICAgICBzaG93RmFjZTogZmFsc2VcbiAgICAgICB9XG4gICAgIF0sXG4gICAgIFtcbiAgICAgICB7XG4gICAgICAgICBudW1iZXI6IDEwLFxuICAgICAgICAgc2hvd0ZhY2U6IGZhbHNlXG4gICAgICAgfSxcbiAgICAgICB7XG4gICAgICAgICBudW1iZXI6IDExLFxuICAgICAgICAgc2hvd0ZhY2U6IGZhbHNlXG4gICAgICAgfSxcbiAgICAgICB7XG4gICAgICAgICBudW1iZXI6IDEyLFxuICAgICAgICAgc2hvd0ZhY2U6IGZhbHNlXG4gICAgICAgfVxuICAgICBdXG4gICBdXG4gfTtcbiBcbiAvLyByZWR1eCB0ZXN0XG4gXG4gXG4gIl19