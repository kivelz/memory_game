{"version":3,"sources":["App-test.js"],"names":["describe","it","results","console","log","expect","toBe","row","col","number","toEqual","clickedCount","initState","count","loading","correctCardNumbers","isEnded","cardItems","showFace","undefined","type","RESTART_GAME"],"mappings":"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","sourcesContent":["/**\n * @format\n */\n\n import 'react-native';\n // Note: test renderer must be required after react-native.\n import React from 'react';\n \n import { addCompareItem, checkContains, deleteCompareItem, getClickedCount, getCompareItemInfo, getRandomList, setClickedCount, setCompareItemInfo } from '../app/utils/CommonFunctions';\n import mainReducer from '../app/redux/reducers/mainReducer';\n import { RESTART_GAME } from '../app/redux/types/mainType';\n \n describe(\"CommonFunctions test\", () => {\n   it(\"getRandomList function -> should be 12 integer random list\", () => {\n     let results = getRandomList(1, 100, 6, 2);\n     console.log(results);\n   });\n \n   it(\"setClickedCount and getClickedCount function test -> should be set value \", () => {\n     setClickedCount(1);\n     expect(getClickedCount()).toBe(1);\n   });\n \n   it(\"setCompareInfo and getCompareItemInfo function test\", () => {\n     setCompareItemInfo({ row: 1, col: 2, number: 3 });\n     expect(getCompareItemInfo()).toEqual({ row: 1, col: 2, number: 3 });\n   });\n \n   it(\"addCompareItem and deleteCompareItem function test\", () => {\n     addCompareItem({ row: 1, col: 2, number: 3, clickedCount: 3 });\n     expect(deleteCompareItem(1));\n   });\n \n   it(\"checkContains function test -> should be false\", () => {\n     expect(checkContains({ row: 2, col: 3 })).toBe(false);\n   });\n });\n \n const initState = {\n   count: 0,\n   loading: false,\n   correctCardNumbers: [],\n   isEnded: false,\n   cardItems: [\n     [\n       {\n         number: 1,\n         showFace: false\n       },\n       {\n         number: 2,\n         showFace: false\n       },\n       {\n         number: 3,\n         showFace: false\n       }\n     ],\n     [\n       {\n         number: 4,\n         showFace: false\n       },\n       {\n         number: 5,\n         showFace: false\n       },\n       {\n         number: 6,\n         showFace: false\n       }\n     ],\n \n     [\n       {\n         number: 7,\n         showFace: false\n       },\n       {\n         number: 8,\n         showFace: false\n       },\n       {\n         number: 9,\n         showFace: false\n       }\n     ],\n     [\n       {\n         number: 10,\n         showFace: false\n       },\n       {\n         number: 11,\n         showFace: false\n       },\n       {\n         number: 12,\n         showFace: false\n       }\n     ]\n   ]\n };\n \n // redux test\n it(\"Should return the initial main reducer state\", () => {\n   expect(mainReducer(undefined, {})).toEqual(initState)\n });\n \n it(\"Should return the restarted main reducer state\", () => {\n   expect(mainReducer(undefined, { type: RESTART_GAME })).toEqual({\n     ...initState,\n     isEnded: false,\n     loading: true,\n   })\n });\n\n \n "]}